{"version":3,"file":"static/js/537.d4e4a111.chunk.js","mappings":"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","sources":["layout/content/pages/messages/friends/Friend.tsx","layout/content/pages/messages/friends/Friends.styled.ts","layout/content/pages/messages/friends/Friends.tsx","layout/content/pages/messages/dialogs/Dialogs.styles.ts","layout/content/pages/messages/dialogs/Dialog.tsx","layout/content/pages/messages/dialogs/Dialogs.tsx","layout/content/pages/messages/Messages.styled.ts","layout/content/pages/messages/Messages.tsx","layout/content/pages/messages/MessagesContainer.tsx"],"sourcesContent":["import React, {FC} from \"react\"\nimport {SimpleCell} from \"../../../../../components/SimpleCell/SimpleCell\"\nimport {NavLink} from \"react-router-dom\"\nimport * as C from \"../../../../../components/Styled/Components\"\nimport {FriendType} from \"../../../../../redux/reducers/dialogs-reducer\"\n\ntype FriendPropsType = {\n    friend: FriendType\n}\n\nexport const Friend: FC<FriendPropsType> = ({friend}) => {\n    return (\n        <NavLink to={`/messages/${friend.userId}`}>\n            <C.ContentBlock $hover={true}>\n                <SimpleCell image={friend.userImg} title={friend.userName} subtitle={friend.city}/>\n            </C.ContentBlock>\n        </NavLink>\n    )\n}","import styled from \"styled-components\"\nimport {theme} from \"../../../../../styles/Theme\"\n\nexport const Friends = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${theme.indentation.gap};\n  flex: 1;\n  overflow: auto;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  height: 70vh;\n\n  &::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n  }\n`","import React, {FC} from \"react\"\nimport {Friend} from \"./Friend\"\nimport * as S from \"./Friends.styled\"\nimport {FriendType} from \"../../../../../redux/reducers/dialogs-reducer\"\n\ntype FriendsPropsType = {\n    friends: FriendType[]\n}\nexport const Friends: FC<FriendsPropsType> = ({friends}) => {\n\n    const friendsList: JSX.Element[] = friends && friends.map(friend => (<Friend key={friend.userId} friend={friend}/>))\n\n    return (\n        <S.Friends>\n            {friendsList}\n        </S.Friends>\n    )\n}","import styled from \"styled-components\"\nimport {theme} from \"../../../../../styles/Theme\"\n\nexport const Dialogs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  flex: 3;\n  background-color: ${theme.colors.secondaryBg};\n  padding: ${theme.indentation.padding};\n  overflow: auto;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  max-height: 70vh;\n\n  &::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n  }\n`","import React, {FC} from \"react\"\nimport {SimpleCell} from \"../../../../../components/SimpleCell/SimpleCell\"\nimport * as C from \"../../../../../components/Styled/Components\"\nimport {DialogType} from \"../../../../../redux/reducers/dialogs-reducer\"\n\ntype DialogPropsType = {\n    dialog: DialogType\n}\nexport const Dialog: FC<DialogPropsType> = ({dialog}) => {\n\n    return (\n        <C.FlexWrapper $justify={dialog.userId === 1 ? \"flex-end\" : \"flex-start\"}>\n            <C.ContentBlock size={70} $chat={dialog.userId === 1 ? \"Right\" : \"Left\"}>\n                <SimpleCell image={dialog.userImg} title={dialog.userName} subtitle={dialog.date}/>\n                <p>{dialog.comment}</p>\n            </C.ContentBlock>\n        </C.FlexWrapper>\n    )\n}","import React, {FC, useEffect, useRef, useState} from \"react\"\nimport * as S from \"./Dialogs.styles\"\nimport {Dialog} from \"./Dialog\"\nimport {DialogType} from \"../../../../../redux/reducers/dialogs-reducer\"\n\ntype DialogsPropsType = {\n    dialogs: DialogType[]\n}\nexport const Dialogs: FC<DialogsPropsType> = ({dialogs}) => {\n\n    const chatContainerRef = useRef<HTMLDivElement>(null);\n    const [initialLoad, setInitialLoad] = useState(true);\n\n    useEffect(() => {\n        if (chatContainerRef.current) {\n            if (initialLoad) {\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n                setInitialLoad(false);\n            } else {\n                chatContainerRef.current.scrollTo({\n                    top: chatContainerRef.current.scrollHeight,\n                    behavior: 'smooth',\n                });\n            }\n        }\n    }, [dialogs, initialLoad]);\n\n    const dialogsList: JSX.Element[] = dialogs && dialogs.map(dialog => (<Dialog key={dialog.id} dialog={dialog}/>))\n\n    return (\n        <S.Dialogs ref={chatContainerRef}>\n            {dialogsList}\n        </S.Dialogs>\n    )\n}","import styled from \"styled-components\"\n\nexport const Messages = styled.div`\n  display: flex;\n  gap: 20px;\n`","import React, {FC} from \"react\"\nimport {Friends} from \"./friends/Friends\"\nimport {Dialogs} from \"./dialogs/Dialogs\"\nimport * as S from \"./Messages.styled\"\nimport {BlockWrapper} from \"../../../../components/BlockWrapper/BlockWrapper\"\nimport {PropsType} from \"./MessagesContainer\"\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {FlexWrapper} from \"../../../../components/Styled/Components\";\nimport {FormTextArea} from \"../../../../components/Form/FormTextArea\";\nimport {Button} from \"../../../../components/Button/Button\";\nimport messageIcon from \"../../../../assets/icons/message.svg\"\nimport {maxLength20, requiredField} from \"../../../../utils/validators\";\n\ntype FormDataType = {\n    value: string\n}\n\nexport const Messages: FC<PropsType> = ({friends, dialogs, buttonTitle, callback}) => {\n\n    const onSubmit = (values: FormDataType) => {\n        callback(values.value)\n    }\n\n    return (\n        <BlockWrapper title=\"Messages\">\n            <S.Messages>\n                <Friends friends={friends}/>\n                <Dialogs dialogs={dialogs}/>\n            </S.Messages>\n            <MessageReduxForm onSubmit={onSubmit}/>\n        </BlockWrapper>\n    )\n}\n\nconst MessageForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FlexWrapper $direction=\"column\" $gap={20} $justify=\"center\" $align=\"center\">\n                <Field name=\"value\" component={FormTextArea} type=\"textarea\" placeholder=\"your text here...\"\n                       validate={[requiredField, maxLength20]}/>\n                <Button title=\"Send Message\" icon={messageIcon}/>\n            </FlexWrapper>\n        </form>\n    )\n}\n\nconst MessageReduxForm = reduxForm<FormDataType>({form: 'message'})(MessageForm)","import {Messages} from \"./Messages\"\nimport {connect} from \"react-redux\"\nimport {AppStateType} from \"../../../../redux/redux-store\"\nimport {\n    addMessageAC,\n    DialogActionsType,\n    DialogType,\n    FriendType\n} from \"../../../../redux/reducers/dialogs-reducer\"\nimport {compose, Dispatch} from \"redux\"\nimport {withAuthRedirect} from \"../../../../hoc/withAuthRedirect\"\nimport {ComponentType} from \"react\";\n\n\ntype MapStatePropsType = {\n    dialogs: DialogType[]\n    friends: FriendType[]\n    buttonTitle: string\n}\n\ntype MapDispatchPropsType = {\n    callback: (newValue: string) => void\n}\n\nexport type PropsType = MapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    dialogs: state.dialogsPage.dialogs,\n    friends: state.dialogsPage.friends,\n    buttonTitle: \"Send Message\",\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<DialogActionsType>): MapDispatchPropsType => ({\n    callback: (newValue: string) => {\n        dispatch(addMessageAC(newValue))\n    }\n})\n\nconst MessagesContainer  =  compose<ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Messages)\n\nexport default MessagesContainer\n"],"names":["Friend","friend","to","userId","$hover","SimpleCell","image","userImg","title","userName","subtitle","city","Friends","styled","theme","friends","friendsList","map","Dialogs","Dialog","dialog","$justify","size","$chat","date","comment","dialogs","chatContainerRef","useRef","useState","initialLoad","setInitialLoad","useEffect","current","scrollTop","scrollHeight","scrollTo","top","behavior","dialogsList","id","ref","Messages","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","$direction","$gap","$align","Field","name","component","FormTextArea","type","placeholder","validate","requiredField","maxLength20","Button","icon","messageIcon","compose","connect","state","dialogsPage","buttonTitle","dispatch","callback","newValue","addMessageAC","withAuthRedirect","BlockWrapper","values","value"],"sourceRoot":""}